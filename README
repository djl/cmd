kid
====

kid is an extensible bookmarklet command thing. It's similar to
Shortwave_ and `Quix`_.

.. _Shortwave: http://shortwaveapp.com
.. _Quix: http://quixapp.com



Usage
-----

1. Upload kid.php and point your browser to it.
2. Enter the URL to your shortcuts file.
3. Drag the bookmarklet onto your bookmarks bar.
4. Click bookmarklet.



Syntax
------

kid features the standard Shortwave/Quix tokens:

* ``%s`` - will be replaced by any arguments you provide.
* ``%d`` - the domain of the current site.
* ``%r`` - the full URL of the current site.
* ``%t`` - the title of the current page
* ``>`` - comment to the end of the line.

Plus some extras:

* ``%c`` - the full given command.
* ``%l`` - any highlighted text on the current page
* ``%{kittens}`` - a positional argument, to be optionally overridden.
* ``%{name:content}`` - a block. If the name is given in the command,
  ``content`` is parsed along with the given arguments. Otherwise it is ignored.
* ``$ OPTION VALUE`` - a custom configuration option



Blocks
------

Warning! Blocks are very experimental (read: buggy and not implemented very well).
They may change, break or disappear completely in favour of something better.
I would not recommend relying on them too heavily for now.


Nested blocks allow you to supply search terms out of order and allows
selective application of certain rules based on search terms.

Defining a section looks like this:

::

    %{name:content}


The ``name`` is what you'll use to pass arguments to your block. ``content``
is what will be applied. Blocks are effectively nested shortcuts.

Here's a full example of a shortcut with a block:

gh http://github.com/search?q=%s&type=Everything%{lang:&language=%s} GitHub Search


When calling the above shortcut without a block (e.g. ``gh flask``), the
``&language=%s`` section is *not* applied.

Calling the shortcut with a block, like so:

::

    gh flask,lang=python


Will result in the following URL:

::

    http://github.com/search?q=flask&type=Everything&language=python



You can pass multiple arguments to a single block by separating them with
a comma (or your choice of ``ARGUMENT_DELIMITER``), but blocks must be
called *after* all other positional arguments have been given.



Compatibility
-------------

kid *should* be able to read your Shortwave and Quix files, but obviously
neither will be able to parse the extra syntax kid provides.

If kid *can't* correctly parse one of these files, it's a bug.



Configuration
-------------

kid has the ability to dynamically change it's settings based on your
shortcuts file.

The syntax is as follows:

::

    $ CONFIGURATION_OPTION VALUE


That is a dollar sign (``$``) followed the configuration option you'd
like to set and the value you'd like to set it to.

Say you'd like to change the help trigger to a question mark. Place the
following line somewhere in your shortcuts file:

::

    $ HELP_TRIGGER ?




Examples
-----------

See examples.txt.



Notes
-----

* PHP must be compiled --with-curl
* JavaScript is required.
* When upgrading to a new version or changing settings, an update to your
  bookmarklet may be required.
* kid is not optimized. It's probably nowhere near the speed it could be.



Todo
----

* Update help page to better show search arguments.
